/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.registro_ucompensar;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jonathan D. R. Olivos
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    Person[] visitors;
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        createRecordBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        saveRecordBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOutput = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registro Museo UCompensar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(301, 301, 301))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Registro");

        createRecordBtn.setText("Crear Registro");
        createRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRecordBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Salir");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        saveRecordBtn.setText("Guardar Registro");
        saveRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRecordBtnActionPerformed(evt);
            }
        });

        tableOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "N° Identificación", "Edad", "Categoría Afilicación", "Valor Entrada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createRecordBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(368, 368, 368)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(createRecordBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveRecordBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitBtn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método llamado cuando se hace clic en el botón para crear un nuevo registro de visitantes.
     * Crea un nuevo registro de visitantes y muestra un resumen en un cuadro de diálogo.
     * Elimina todas las filas existentes en la tabla antes de agregar las nuevas.
     * @param evt El evento que desencadenó la acción
     */
    private void createRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRecordBtnActionPerformed
        // Obtiene el modelo de la tabla
        DefaultTableModel model = (DefaultTableModel) tableOutput.getModel();

        // Crea un nuevo registro de visitantes
        visitors = createVisitorsRecord();

        // Elimina todas las filas existentes en la tabla
        removeAllRows(model);

        // Variables para calcular el total a pagar y el número de adultos
        StringBuilder infoToShow = new StringBuilder();
        double totalToPay = 0;
        int totalAdults = 0;

        // Itera sobre cada visitante para agregar sus datos a la tabla y calcular el total a pagar y el número de adultos
        for(Person visitor : visitors){
            infoToShow.append(String.format("%s: %.2f$\n", visitor.getName(), visitor.getEntryValue()));
            totalToPay += visitor.getEntryValue();

            // Agrega la nueva fila a la tabla
            addRowToTable(model, visitor);

            // Incrementa el contador de adultos si el visitante es mayor de edad
            if(visitor.getAge() >= 18)
                totalAdults++;
        }

        // Crea un mensaje de resumen con el total a pagar y la cantidad de adultos y menores de edad
        infoToShow.append(String.format("Total a pagar: %.2f\nVisitantes: %d\nTotal Adultos: %d\nTotal Menores de Edad: %d", totalToPay, visitors.length, totalAdults, (visitors.length - totalAdults)));

        // Muestra el mensaje de resumen en un cuadro de diálogo
        JOptionPane.showMessageDialog(rootPane, infoToShow.toString(), "Resumen", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_createRecordBtnActionPerformed

    /**
     * Método llamado cuando se hace clic en el botón para salir del programa.
     * Muestra un mensaje de confirmación antes de salir.
     * @param evt El evento que desencadenó la acción
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        if (JOptionPane.showConfirmDialog(rootPane, "¿Estás Seguro de que deseas salir?") == 0)
            this.dispose();
    }//GEN-LAST:event_exitBtnActionPerformed

    /**
     * Método llamado cuando se hace clic en el botón para guardar el registro en pantalla
     * @param evt El evento que desencadenó la acción
     */
    private void saveRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRecordBtnActionPerformed
        // Guarda el registro en un archivo
        saveRecord(visitors);
    }//GEN-LAST:event_saveRecordBtnActionPerformed

    /**
     * Crea un registro de visitantes solicitando información al usuario a través de cuadros de diálogo.
     * Retorna un array de objetos Person con los datos de los visitantes.
     * Si ocurre un error durante la creación del registro, muestra un mensaje de error y retorna null.
     * @return Un array de objetos Person con los datos de los visitantes, o null si ocurre un error.
     */
    public Person[] createVisitorsRecord(){
        try{
            // Solicita al usuario la cantidad de personas que se registrarán
            int amountPeople = getNumberOfVisitors();

            //Verifica si se ingresó al menos una persona para el registro
            if(amountPeople <= 0){
                JOptionPane.showMessageDialog(rootPane, "Debe ingresar al menos una persona para el registro");
                return null;
            }

            // Crea un array para almacenar los visitantes
            Person[] visitors = new Person[amountPeople];
            for(int i = 0; i < amountPeople; i++) {
                JOptionPane.showMessageDialog(rootPane, "Datos del visitante " + (i+1), "Visitante " + (i+1), JOptionPane.INFORMATION_MESSAGE);

                // Solicita la información de cada visitante
                String name = getVisitorName(i+1);
                int id = getVisitorId(i+1);
                short age = getVisitorsAge(i+1);
                char membershipCategory = getMembershipCategory(i+1);

                // Crea un objeto Person con la información del visitante y lo agrega al array de visitantes
                visitors[i] = new Person(name, id, age, membershipCategory);
            }
            return visitors; // Retorna el array de visitantes
        }catch(Exception e) {
            // Si ocurre un error durante la creación del registro, muestra un mensaje de error y retorna null
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(rootPane, "Ha ocurrido un error al crear el registro de visitantes. Por favor, intenta nuevamente.");
            return null;
        }
    }

    // Métodos auxiliares para solicitar información de cada visitante
    private int getNumberOfVisitors(){
        return Integer.parseInt(JOptionPane.showInputDialog(rootPane, "Nombre: " ));
    }
    private String getVisitorName(int index){return JOptionPane.showInputDialog(rootPane, String.format("Nombre del visitante %d", index));}
    private int getVisitorId(int index){return Integer.parseInt(JOptionPane.showInputDialog(rootPane, String.format("Id del visitante %d", index)));}
    private short getVisitorsAge(int index){return Short.parseShort(JOptionPane.showInputDialog(rootPane, String.format("Edad del visitante %d", index)));}
    private char getMembershipCategory(int index){
        char membershipCategory;
        do{
            String input = JOptionPane.showInputDialog(rootPane, String.format("Categoría de Afilicación del visitante %d\nCategoría A: \"A\"\nCategoría B: \"B\"\nCategoría C: \"C\"\nNo está afiliado: \"N\" ", index));
            membershipCategory = input.toUpperCase().charAt(0);
            if (membershipCategory != 'A' && membershipCategory != 'B' && membershipCategory != 'C' && membershipCategory != 'N') {
                JOptionPane.showMessageDialog(rootPane, "Ingresaste un valor erróneo, intenta de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }while(membershipCategory != 'A' && membershipCategory != 'B' && membershipCategory != 'C' && membershipCategory != 'N');
        return membershipCategory;
    }
    /**
     * Elimina todas las filas existentes en el modelo de la tabla.
     * @param model El modelo de la tabla
     */
    public void removeAllRows(DefaultTableModel model){
        while(model.getRowCount() > 0){
            model.removeRow(0);
        }
    }

    /**
     * Agrega una nueva fila a la tabla con los datos del visitante.
     * @param model El modelo de la tabla
     * @param visitor El visitante cuyos datos se agregarán a la tabla
     */
    public void addRowToTable(DefaultTableModel model, Person visitor){
        Object[] newRowData = {visitor.getName(), visitor.getId(), visitor.getAge(), (visitor.getMembershipCategory() == 'N')?"No Aplica":visitor.getMembershipCategory(), visitor.getEntryValue()};
        model.addRow(newRowData);
    }

    /**
     * Guarda un registro de visitantes en un archivo seleccionado por el usuario.
     * Muestra un mensaje de confirmación una vez que el archivo se ha guardado correctamente.
     * Si no hay ningún registro para guardar o si se produce un error, muestra un mensaje de error correspondiente.
     * @param visitors El array de personas del registro de una visita.
     */
    public void saveRecord(Person[] visitors){
        try{
            // Verifica si hay registros para guardar en la tabla
            if(tableOutput.getRowCount() <= 0){
                throw new IOException("No hay registro para guardar");
            }

            // Crea un nuevo JFileChooser para que el usuario seleccione la ubicación y el nombre del archivo
            JFileChooser jFileChooser = new JFileChooser();
            int result = jFileChooser.showSaveDialog(rootPane);

            // Si el usuario selecciona un archivo y hace clic en "Guardar" correctamente
            if(result == JFileChooser.APPROVE_OPTION){
                File file = jFileChooser.getSelectedFile();

                // Crea una cadena de texto con los datos de los visitantes
                String data = parseRecordText(visitors);

                // Crea un FileWriter, un BufferedWriter y un PrintWriter para escribir los datos en el archivo
                try (FileWriter fileWriter = new FileWriter(file);
                     BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
                     PrintWriter writer = new PrintWriter(bufferedWriter)){

                    // Escribe los datos en el archivo
                    writer.write(data);

                    // Muestra un mensaje de confirmación
                    JOptionPane.showMessageDialog(rootPane, "Archivo guardado exitósamente");
                }
            }else{
                // Si el usuario cancela la operación, muestra un mensaje indicando que no se pudo seleccionar el archivo
                throw new IOException("No se pudo seleccionar el archivo");
            }
        }catch(IOException e){
            // Si se produce un error, muestra un mensaje de error con la descripción del problema
            JOptionPane.showMessageDialog(rootPane,"Error al guardar el archivo: " + e.getMessage());
        }
    }

    /**
     * Genera una cadena de texto formateada con la información de los visitantes para ser escrita en un archivo.
     * @param visitors El array de personas del registro de una visita.
     * @return Una cadena de texto con la información formateada de los visitantes.
     */
    public String parseRecordText(Person[] visitors){
        // StringBuilder para construir la cadena de texto
        StringBuilder data = new StringBuilder("Nombre\t| N° Identificación\t| Edad\t| Categoría\t| Entrada\n");

        // Itera sobre cada visitante para agregar su información formateada a la cadena de texto
        for (Person visitor : visitors) {
            // Agrega la información del visitante y un salto de línea al StringBuilder
            data.append(visitor.showInformation()).append("\n");
        }

        // Convierte el StringBuilder a una cadena de texto y la devuelve
        return data.toString();
    }
    /**
     * Clase que representa a una persona con información básica para crear un registro.
     */
    public static class Person {
        private String name;
        private int id;
        private short age;
        private char membershipCategory;
        private double entryValue;

        /**
         * Constructor de la clase Person.
         * @param name Nombre de la persona.
         * @param id Identificación de la persona.
         * @param age Edad de la persona.
         * @param membershipCategory Categoría de afiliación de la persona.
         */
        public Person(String name, int id, short age, char membershipCategory){
            this.name = name;
            this.id = id;
            this.age = age;
            this.membershipCategory = membershipCategory;
            calculateEntryValue();
        }

        // Métodos getters y setters para los atributos

        String getName(){
            return this.name;
        }
        int getId(){
            return this.id;
        }
        short getAge(){
            return this.age;
        }
        char getMembershipCategory(){
            return this.membershipCategory;
        }
        double getEntryValue(){ return this.entryValue; }
        void setName(String name){
            this.name = name;
        }
        void setId(int id){
            this.id = id;
        }
        void setAge(short age){
            this.age = age;
        }
        void setMembershipCategory(char membershipCategory){
            this.membershipCategory = membershipCategory;
        }
        private void setEntryValue(double entreValue){ this.entryValue = entreValue; }

        /**
         * Método para calcular el valor de la entrada según la edad y la categoría de afiliación.
         */
        void calculateEntryValue(){
            final double GENERAL_ENTRY_VALUE = 30000.0;
            final double[][] MEMBERSHIP_VALUE = {
                    {65.0, GENERAL_ENTRY_VALUE * .85},
                    {66.0, GENERAL_ENTRY_VALUE * .7},
                    {67.0, GENERAL_ENTRY_VALUE * .5},
                    {78.0, GENERAL_ENTRY_VALUE}
            };
            if(this.getAge() < 18){
                this.setEntryValue(5000);
            }else if(this.getAge() >= 18){
                for(double[] value : MEMBERSHIP_VALUE){
                    if(value[0] == this.getMembershipCategory()){
                        this.setEntryValue(value[1]);
                        break;
                    }
                }
            }
        }

        String showInformation(){
            return String.format("%s\t| %d\t| %d\t| %s\t| %.2f$", this.getName(), this.getId(), this.getAge(), (this.getMembershipCategory() == 'N') ? "No Afiliado" : this.getMembershipCategory(), this.getEntryValue() );
        }

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createRecordBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveRecordBtn;
    private javax.swing.JTable tableOutput;
    // End of variables declaration//GEN-END:variables
}
